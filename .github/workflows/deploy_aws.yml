name: Deploy to Amazon ECS
run-name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vacationplanner
  ECS_SERVICE: vacation_stay_scrapper
  ECS_CLUSTER: vacation-planner
  ECS_TASK_DEFINITION: vacation-planner


permissions:
  contents: read

jobs:
  micro-services:
    name: Micro Services
    runs-on: ubuntu-latest
    outputs:
      dockerfile_folders: ${{ steps.micro-services.outputs.dockerfile_folders }}
    steps:
    - name: Preparing microservices
      id: micro-services
      run: |
        dockerfile_folders=()
        for folder in */; do
            if [ -f "$folder/Dockerfile" ]; then
                dockerfile_folders+=("$folder")
            fi
        done
        echo "dockerfile_folders=dockerfile_folders" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        max-parallel: [ 2 ]
        folders: ${{ fromJson(needs.micro-services.outputs.dockerfile_folders) }}
        docker_images: ${{ steps.build-image.outputs.image }}
        task-definitions: ${{ steps.task-def.outputs.task-definition }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.6.2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ${{ matrix.folders }}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: download the service task definition file
      id: download-task-definition
      run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ matrix.folders }}
        image: ${{ matrix.docker_images }}

    - name: Deploy to Amazon ECS
      id: deploy-to-ecs
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ matrix.task-definitions }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true